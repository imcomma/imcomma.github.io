[{"title":"C++零碎知识点小记","url":"/2021/11/29/c-ling-sui-zhi-shi-dian-xiao-ji/","content":"\n# 说点什么\n\n好久没更新博客了，不能闲置了。\n\n每次打代码，修BUG都会有一些小收获，于是我就打算在这里记录我每次学到的零碎知识点。\n\n本人表达能力有限，若有不当之处，欢迎指正。\n\n\n\n# 11月29日小记\n\n今晚在写哈夫曼树的编码解码的时候，遇到了个问题。\n\n因为可能需要编码译码**空格**，而在C++中，空格通常会是个特殊的存在。\n\n在输入字符的时候，我选择了getline()函数获取一行输入。（dev能直接使用，vs则需要引用<string>库）\n\n*以下是测试代码：*\n\n```C++\n#include <iostream>\nusing namespace std;\nint main(){\n\tint n;\n\tstring str;\n\tcin>>n;  //输入n个字符\n\tgetline(cin,str); //getline(infile,str); getline还能对文件进行读行操作\n\tcout<<str[0]<<\".\"<<str[2]<<endl; \n\tcout<<str.length();\n\treturn 0;\n}\n```\n\n\n\n这段代码运行后会发现getline()并没有获取输入文本。\n\n这是因为在C++中，使用cin读取数据后，再使用getline读字符串，发现缓冲区中还有endl，便进行读入操作，所以后面没能继续读入我们所需要的文本。\n\n\n\n解决方法：在两者之间加入`cin.ignore();`，这样就能清空缓冲区了。\n\n\n\n*示例如下：*\n\n```C++\n#include <iostream>\nusing namespace std;\nint main(){\n\tint n;\n\tstring str;\n\tcin>>n;  //输入n个字符\n    \tcin.ignore(); //清空缓冲区，防止getline读取endl\n\tgetline(cin,str);\n\tcout<<str[0]<<\".\"<<str[2]<<endl; \n\tcout<<str.length();\n\treturn 0;\n}\n```\n\n\n\n"},{"title":"尝试Markdown的基础语法","url":"/2021/11/11/chang-shi-markdown-de-ji-chu-yu-fa/","content":"\n## 引言\n\n可能是因为新鲜感，最近一直在装饰我的博客，但是我发现这样有点本末倒置，博客应该更加注重内容的输出，所以为了更好的让自己习惯使用博客去**记录和学习**。我学习了Markdown的基础语法并尝试进行运用。\n\n\n\n## Markdown基础语法\n\n### 标题\n\n在文字前加空格和`#`标记符\n\n例：\n\n`# 一级标题   `\n\n`## 二级标题`\n\n总共有六级标题可以选择。\n\n\n\n### 字体加粗\n\n使用两个`**`标记符包裹要加粗的文字。 \n\n例：\n\n`**加粗文字**`\n\n效果：\n\n**加粗文字**\n\n\n\n### 斜体\n\n使用两个`*`标记符包裹要变斜体的文字。\n\n例：\n\n`*斜体文字*`\n\n效果：\n\n*斜体文字*\n\n\n\n### 引用\n\n在引用的文字内容前面加上`>`标记符。\n\n例：`>引用文字`\n\n效果：\n\n> 引用文字\n\n\n\n### 列表\n\n#### 无序列表\n\n在无序列表的文字前加标记符`-`或`+`或`*`。\n\n例：\n\n`- 无序列表1`\n\n`- 无序列表2`\n\n效果：\n\n- 无序列表1\n- 无序列表2\n\n#### 有序列表\n\n在有序列表的文字面前加上`1. ` `2. ` `3. `。\n\n例：\n\n`1. 有序列表1`\n\n`2. 有序列表2`\n\n效果：\n\n1. 有序列表1\n2. 有序列表2\n\n\n\n### 链表\n\n使用标记符`[]()`，\n\n在方括号写入成为链接的内容，圆括号写入链接。\n\n例：\n\n`[Comma](https://imcomma.top)`\n\n[Comma](https://imcomma.top)\n\n\n\n### 图片\n\n使用标记符`![]()`\n\n在方括号写入图片的名称，圆括号写入图片链接或图片位置。\n\n效果：\n\n![Comma](/images/comma.jpg)\n\n### 代码\n\n#### 单行代码\n\n使用两个标记符`包裹代码。\n\n效果：\n\n`单行代码`\n\n#### 多行代码\n\n使用两个标记符```包裹代码。\n\n例：\n\n```c++\n#include <iostream>\nusing namespace std;\nint main(){\n    cout<<\"Hello, Comma's Blog~\"<<endl;\n    return 0;\n}\n```\n\n\n\n### 分割线\n\n在一行中使用三个以上的`*`或`-`或`_`标记符即可插入分割线。\n\n例：\n\n`***`\n\n效果：\n\n***\n\n\n\n### 删除线\n\n使用两个标记符`~~`包裹需要添加删除线的文字。\n\n例：\n\n`~~这是删除线~~`\n\n效果：\n\n~~这是删除线~~\n\n\n\n### 表格\n\n```\nColName1 | ColName2 | ColName3\n---------|----------|---------\nColValue | ColValue | ColValue\nColValue | ColValue | ColValue\nColValue | ColValue | ColValue\nColValue | ColValue | ColValue\n```\n\n效果：\n\n| ColName1 | ColName2 | ColName3 |\n| -------- | -------- | -------- |\n| ColValue | ColValue | ColValue |\n| ColValue | ColValue | ColValue |\n| ColValue | ColValue | ColValue |\n| ColValue | ColValue | ColValue |\n\n左对齐 居中对齐 右对齐\n\n```\n|ColName1 | ColName2 | ColName3|\n|---------|:--------:|--------:|\n|ColValue | ColValue | ColValue|\n|ColValue | ColValue | ColValue|\n|ColValue | ColValue | ColValue|\n|ColValue | ColValue | ColValue|\n```\n\n效果：\n\n| ColName1 | ColName2 | ColName3 |\n| -------- | :------: | -------: |\n| ColValue | ColValue | ColValue |\n| ColValue | ColValue | ColValue |\n| ColValue | ColValue | ColValue |\n| ColValue | ColValue | ColValue |\n\n参考资料：\n\n[快速掌握 Markdown 基础语法](https://xpoet.cn/2017/10/快速掌握Markdown基础语法/)\n\n[Markdown基础语法官方教程](https://markdown.com.cn/basic-syntax/)\n\n","tags":["Markdown"]},{"title":"我的第一篇博客","url":"/2021/11/06/wo-de-di-yi-pian-bo-ke/","content":"\n历经几个月的时间，期间断断续续的，终于在昨晚把博客搭建起来了。\n\n很开心~\n\n在此很感谢[**luo神**](https://luo41.top)鼎力支持！！\n\n","tags":["搭建博客"]},{"title":"Hello World","url":"/2021/11/05/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]