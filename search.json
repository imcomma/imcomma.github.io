[{"title":"Hello World","url":"/2021/11/05/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"尝试Markdown的基础语法","url":"/2021/11/11/chang-shi-markdown-de-ji-chu-yu-fa/","content":"引言可能是因为新鲜感，最近一直在装饰我的博客，但是我发现这样有点本末倒置，博客应该更加注重内容的输出，所以为了更好的让自己习惯使用博客去记录和学习。我学习了Markdown的基础语法并尝试进行运用。\nMarkdown基础语法标题在文字前加空格和#标记符\n例：\n# 一级标题   \n## 二级标题\n总共有六级标题可以选择。\n字体加粗使用两个**标记符包裹要加粗的文字。 \n例：\n**加粗文字**\n效果：\n加粗文字\n斜体使用两个*标记符包裹要变斜体的文字。\n例：\n*斜体文字*\n效果：\n斜体文字\n引用在引用的文字内容前面加上&gt;标记符。\n例：&gt;引用文字\n效果：\n\n引用文字\n\n列表无序列表在无序列表的文字前加标记符-或+或*。\n例：\n- 无序列表1\n- 无序列表2\n效果：\n\n无序列表1\n无序列表2\n\n有序列表在有序列表的文字面前加上1.  2.  3. 。\n例：\n1. 有序列表1\n2. 有序列表2\n效果：\n\n有序列表1\n有序列表2\n\n链表使用标记符[]()，\n在方括号写入成为链接的内容，圆括号写入链接。\n例：\n[Comma](https://imcomma.top)\nComma\n图片使用标记符![]()\n在方括号写入图片的名称，圆括号写入图片链接或图片位置。\n效果：\n\n代码单行代码使用两个标记符`包裹代码。\n效果：\n单行代码\n多行代码使用两个标记符```包裹代码。\n例：\n#include &lt;iostream&gt;using namespace std;int main(){    cout&lt;&lt;\"Hello, Comma's Blog~\"&lt;&lt;endl;    return 0;}\n\n\n\n分割线在一行中使用三个以上的*或-或_标记符即可插入分割线。\n例：\n***\n效果：\n\n删除线使用两个标记符~~包裹需要添加删除线的文字。\n例：\n~~这是删除线~~\n效果：\n这是删除线\n表格ColName1 | ColName2 | ColName3---------|----------|---------ColValue | ColValue | ColValueColValue | ColValue | ColValueColValue | ColValue | ColValueColValue | ColValue | ColValue\n\n效果：\n\n\n\nColName1\nColName2\nColName3\n\n\n\nColValue\nColValue\nColValue\n\n\nColValue\nColValue\nColValue\n\n\nColValue\nColValue\nColValue\n\n\nColValue\nColValue\nColValue\n\n\n左对齐 居中对齐 右对齐\n|ColName1 | ColName2 | ColName3||---------|:--------:|--------:||ColValue | ColValue | ColValue||ColValue | ColValue | ColValue||ColValue | ColValue | ColValue||ColValue | ColValue | ColValue|\n\n效果：\n\n\n\nColName1\nColName2\nColName3\n\n\n\nColValue\nColValue\nColValue\n\n\nColValue\nColValue\nColValue\n\n\nColValue\nColValue\nColValue\n\n\nColValue\nColValue\nColValue\n\n\n参考资料：\n快速掌握 Markdown 基础语法\nMarkdown基础语法官方教程\n","tags":["Markdown"]},{"title":"我的第一篇博客","url":"/2021/11/06/wo-de-di-yi-pian-bo-ke/","content":"历经几个月的时间，期间断断续续的，终于在昨晚把博客搭建起来了。\n很开心~\n在此很感谢luo神鼎力支持！！\n","tags":["搭建博客"]},{"title":"C++零碎知识点小记","url":"/2021/11/29/c-ling-sui-zhi-shi-dian-xiao-ji/","content":"说点什么好久没更新博客了，不能闲置了。\n每次打代码，修BUG都会有一些小收获，于是我就打算在这里记录我每次学到的零碎知识点。\n本人表达能力有限，若有不当之处，欢迎指正。\n11月29日小记今晚在写哈夫曼树的编码解码的时候，遇到了个问题。\n因为可能需要编码译码空格，而在C++中，空格通常会是个特殊的存在。\n在输入字符的时候，我选择了getline()函数获取一行输入。（dev能直接使用，vs则需要引用库）\n以下是测试代码：\n#include &lt;iostream&gt;using namespace std;int main(){\tint n;\tstring str;\tcin&gt;&gt;n;  //输入n个字符\tgetline(cin,str); //getline(infile,str); getline还能对文件进行读行操作\tcout&lt;&lt;str[0]&lt;&lt;\".\"&lt;&lt;str[2]&lt;&lt;endl; \tcout&lt;&lt;str.length();\treturn 0;}\n\n\n\n这段代码运行后会发现getline()并没有获取输入文本。\n这是因为在C++中，使用cin读取数据后，再使用getline读字符串，发现缓冲区中还有endl，便进行读入操作，所以后面没能继续读入我们所需要的文本。\n解决方法：在两者之间加入cin.ignore();，这样就能清空缓冲区了。\n示例如下：\n#include &lt;iostream&gt;using namespace std;int main(){\tint n;\tstring str;\tcin&gt;&gt;n;  //输入n个字符    cin.ignore(); //清空缓冲区，防止getline读取endl\tgetline(cin,str);\tcout&lt;&lt;str[0]&lt;&lt;\".\"&lt;&lt;str[2]&lt;&lt;endl; \tcout&lt;&lt;str.length();\treturn 0;}\n\n"}]