<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Comma</title>
  
  <subtitle>Comma</subtitle>
  <link href="http://imcomma.top/atom.xml" rel="self"/>
  
  <link href="http://imcomma.top/"/>
  <updated>2021-12-01T15:17:48.909Z</updated>
  <id>http://imcomma.top/</id>
  
  <author>
    <name>Comma</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++零碎知识点小记</title>
    <link href="http://imcomma.top/2021/11/29/c-ling-sui-zhi-shi-dian-xiao-ji/"/>
    <id>http://imcomma.top/2021/11/29/c-ling-sui-zhi-shi-dian-xiao-ji/</id>
    <published>2021-11-29T14:40:39.000Z</published>
    <updated>2021-12-01T15:17:48.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说点什么"><a href="#说点什么" class="headerlink" title="说点什么"></a>说点什么</h1><p>好久没更新博客了，不能闲置了。</p><p>每次打代码，修BUG都会有一些小收获，于是我就打算在这里记录我每次学到的零碎知识点。</p><p>本人表达能力有限，若有不当之处，欢迎指正。</p><h1 id="11月29日小记"><a href="#11月29日小记" class="headerlink" title="11月29日小记"></a>11月29日小记</h1><p>今晚在写哈夫曼树的编码解码的时候，遇到了个问题。</p><p>因为可能需要编码译码<strong>空格</strong>，而在C++中，空格通常会是个特殊的存在。</p><p>在输入字符的时候，我选择了getline()函数获取一行输入。（dev能直接使用，vs则需要引用<string>库）</string></p><p><em>以下是测试代码：</em></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">string str;</span><br><span class="line">cin&gt;&gt;n;  <span class="comment">//输入n个字符</span></span><br><span class="line"><span class="built_in">getline</span>(cin,str); <span class="comment">//getline(infile,str); getline还能对文件进行读行操作</span></span><br><span class="line">cout&lt;&lt;str[<span class="number">0</span>]&lt;&lt;<span class="string">"."</span>&lt;&lt;str[<span class="number">2</span>]&lt;&lt;endl; </span><br><span class="line">cout&lt;&lt;str.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这段代码运行后会发现getline()并没有获取输入文本。</p><p>这是因为在C++中，使用cin读取数据后，再使用getline读字符串，发现缓冲区中还有endl，便进行读入操作，所以后面没能继续读入我们所需要的文本。</p><p>解决方法：在两者之间加入<code>cin.ignore();</code>，这样就能清空缓冲区了。</p><p><em>示例如下：</em></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">string str;</span><br><span class="line">cin&gt;&gt;n;  <span class="comment">//输入n个字符</span></span><br><span class="line">    cin.<span class="built_in">ignore</span>(); <span class="comment">//清空缓冲区，防止getline读取endl</span></span><br><span class="line"><span class="built_in">getline</span>(cin,str);</span><br><span class="line">cout&lt;&lt;str[<span class="number">0</span>]&lt;&lt;<span class="string">"."</span>&lt;&lt;str[<span class="number">2</span>]&lt;&lt;endl; </span><br><span class="line">cout&lt;&lt;str.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;说点什么&quot;&gt;&lt;a href=&quot;#说点什么&quot; class=&quot;headerlink&quot; title=&quot;说点什么&quot;&gt;&lt;/a&gt;说点什么&lt;/h1&gt;&lt;p&gt;好久没更新博客了，不能闲置了。&lt;/p&gt;
&lt;p&gt;每次打代码，修BUG都会有一些小收获，于是我就打算在这里记录我每次学到的零碎知</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>尝试Markdown的基础语法</title>
    <link href="http://imcomma.top/2021/11/11/chang-shi-markdown-de-ji-chu-yu-fa/"/>
    <id>http://imcomma.top/2021/11/11/chang-shi-markdown-de-ji-chu-yu-fa/</id>
    <published>2021-11-11T12:57:05.000Z</published>
    <updated>2021-11-11T23:14:24.018Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>可能是因为新鲜感，最近一直在装饰我的博客，但是我发现这样有点本末倒置，博客应该更加注重内容的输出，所以为了更好的让自己习惯使用博客去<strong>记录和学习</strong>。我学习了Markdown的基础语法并尝试进行运用。</p><h2 id="Markdown基础语法"><a href="#Markdown基础语法" class="headerlink" title="Markdown基础语法"></a>Markdown基础语法</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>在文字前加空格和<code>#</code>标记符</p><p>例：</p><p><code># 一级标题   </code></p><p><code>## 二级标题</code></p><p>总共有六级标题可以选择。</p><h3 id="字体加粗"><a href="#字体加粗" class="headerlink" title="字体加粗"></a>字体加粗</h3><p>使用两个<code>**</code>标记符包裹要加粗的文字。 </p><p>例：</p><p><code>**加粗文字**</code></p><p>效果：</p><p><strong>加粗文字</strong></p><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><p>使用两个<code>*</code>标记符包裹要变斜体的文字。</p><p>例：</p><p><code>*斜体文字*</code></p><p>效果：</p><p><em>斜体文字</em></p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>在引用的文字内容前面加上<code>&gt;</code>标记符。</p><p>例：<code>&gt;引用文字</code></p><p>效果：</p><blockquote><p>引用文字</p></blockquote><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>在无序列表的文字前加标记符<code>-</code>或<code>+</code>或<code>*</code>。</p><p>例：</p><p><code>- 无序列表1</code></p><p><code>- 无序列表2</code></p><p>效果：</p><ul><li>无序列表1</li><li>无序列表2</li></ul><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>在有序列表的文字面前加上<code>1. </code> <code>2. </code> <code>3. </code>。</p><p>例：</p><p><code>1. 有序列表1</code></p><p><code>2. 有序列表2</code></p><p>效果：</p><ol><li>有序列表1</li><li>有序列表2</li></ol><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>使用标记符<code>[]()</code>，</p><p>在方括号写入成为链接的内容，圆括号写入链接。</p><p>例：</p><p><code>[Comma](https://imcomma.top)</code></p><p><a href="https://imcomma.top/">Comma</a></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>使用标记符<code>![]()</code></p><p>在方括号写入图片的名称，圆括号写入图片链接或图片位置。</p><p>效果：</p><p><img src="/images/comma.jpg" alt="Comma"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="单行代码"><a href="#单行代码" class="headerlink" title="单行代码"></a>单行代码</h4><p>使用两个标记符`包裹代码。</p><p>效果：</p><p><code>单行代码</code></p><h4 id="多行代码"><a href="#多行代码" class="headerlink" title="多行代码"></a>多行代码</h4><p>使用两个标记符```包裹代码。</p><p>例：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    cout&lt;&lt;<span class="string">"Hello, Comma's Blog~"</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>在一行中使用三个以上的<code>*</code>或<code>-</code>或<code>_</code>标记符即可插入分割线。</p><p>例：</p><p><code>***</code></p><p>效果：</p><hr><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>使用两个标记符<code>~~</code>包裹需要添加删除线的文字。</p><p>例：</p><p><code>~~这是删除线~~</code></p><p>效果：</p><p><del>这是删除线</del></p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ColName1 | ColName2 | ColName3</span><br><span class="line">---------|----------|---------</span><br><span class="line">ColValue | ColValue | ColValue</span><br><span class="line">ColValue | ColValue | ColValue</span><br><span class="line">ColValue | ColValue | ColValue</span><br><span class="line">ColValue | ColValue | ColValue</span><br></pre></td></tr></tbody></table></figure><p>效果：</p><table><thead><tr><th>ColName1</th><th>ColName2</th><th>ColName3</th></tr></thead><tbody><tr><td>ColValue</td><td>ColValue</td><td>ColValue</td></tr><tr><td>ColValue</td><td>ColValue</td><td>ColValue</td></tr><tr><td>ColValue</td><td>ColValue</td><td>ColValue</td></tr><tr><td>ColValue</td><td>ColValue</td><td>ColValue</td></tr></tbody></table><p>左对齐 居中对齐 右对齐</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|ColName1 | ColName2 | ColName3|</span><br><span class="line">|---------|:--------:|--------:|</span><br><span class="line">|ColValue | ColValue | ColValue|</span><br><span class="line">|ColValue | ColValue | ColValue|</span><br><span class="line">|ColValue | ColValue | ColValue|</span><br><span class="line">|ColValue | ColValue | ColValue|</span><br></pre></td></tr></tbody></table></figure><p>效果：</p><table><thead><tr><th>ColName1</th><th align="center">ColName2</th><th align="right">ColName3</th></tr></thead><tbody><tr><td>ColValue</td><td align="center">ColValue</td><td align="right">ColValue</td></tr><tr><td>ColValue</td><td align="center">ColValue</td><td align="right">ColValue</td></tr><tr><td>ColValue</td><td align="center">ColValue</td><td align="right">ColValue</td></tr><tr><td>ColValue</td><td align="center">ColValue</td><td align="right">ColValue</td></tr></tbody></table><p>参考资料：</p><p><a class="link" href="https://xpoet.cn/2017/10/%E5%BF%AB%E9%80%9F%E6%8E%8C%E6%8F%A1Markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/">快速掌握 Markdown 基础语法<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="https://markdown.com.cn/basic-syntax/">Markdown基础语法官方教程<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;可能是因为新鲜感，最近一直在装饰我的博客，但是我发现这样有点本末倒置，博客应该更加注重内容的输出，所以为了更好的让自己习惯使用博客去&lt;str</summary>
      
    
    
    
    
    <category term="Markdown" scheme="http://imcomma.top/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://imcomma.top/2021/11/06/wo-de-di-yi-pian-bo-ke/"/>
    <id>http://imcomma.top/2021/11/06/wo-de-di-yi-pian-bo-ke/</id>
    <published>2021-11-06T05:06:46.000Z</published>
    <updated>2021-11-11T23:17:07.921Z</updated>
    
    <content type="html"><![CDATA[<p>历经几个月的时间，期间断断续续的，终于在昨晚把博客搭建起来了。</p><p>很开心~</p><p>在此很感谢<a href="https://luo41.top/"><strong>luo神</strong></a>鼎力支持！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;历经几个月的时间，期间断断续续的，终于在昨晚把博客搭建起来了。&lt;/p&gt;
&lt;p&gt;很开心~&lt;/p&gt;
&lt;p&gt;在此很感谢&lt;a href=&quot;https://luo41.top/&quot;&gt;&lt;strong&gt;luo神&lt;/strong&gt;&lt;/a&gt;鼎力支持！！&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="搭建博客" scheme="http://imcomma.top/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://imcomma.top/2021/11/05/hello-world/"/>
    <id>http://imcomma.top/2021/11/05/hello-world/</id>
    <published>2021-11-05T15:39:11.656Z</published>
    <updated>2021-11-05T15:39:11.657Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a class="link" href="https://hexo.io/">Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link" href="https://hexo.io/docs/">documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link" href="https://hexo.io/docs/troubleshooting.html">troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link" href="https://github.com/hexojs/hexo/issues">GitHub<i class="fas fa-external-link-alt"></i></a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a class="link" href="https://hexo.io/docs/writing.html">Writing<i class="fas fa-external-link-alt"></i></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a class="link" href="https://hexo.io/docs/server.html">Server<i class="fas fa-external-link-alt"></i></a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a class="link" href="https://hexo.io/docs/generating.html">Generating<i class="fas fa-external-link-alt"></i></a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a class="link" href="https://hexo.io/docs/one-command-deployment.html">Deployment<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a class=&quot;link&quot; href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;! This is your very first post. Check </summary>
      
    
    
    
    
  </entry>
  
</feed>
